using System.Data;
using System.Linq.Expressions;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace EfCoreQuery.Controllers
{
    public static class ExtensionsForIQueryable
    {
        /// <summary>
        /// Метод разворачивается в where (item[N].TId1 == x.TId1 || where item[N].TId2 == x.TId2) и так на каждый элемент ids
        /// 
        /*
        Bitmap Heap Scan on "CompositeKeyJoins" c  (cost=12.89..23.14 rows=3 width=32)
          Recheck Cond: ((("IdPart1" = 6) AND ("IdPart2" = 14)) OR (("IdPart1" = 23) AND ("IdPart2" = 9)) OR (("IdPart1" = 94) AND ("IdPart2" = 73)))
          ->  BitmapOr  (cost=12.89..12.89 rows=3 width=0)
        ->  Bitmap Index Scan on "PK_CompositeKeyJoins"  (cost=0.00..4.29 rows=1 width=0)
              Index Cond: (("IdPart1" = 6) AND ("IdPart2" = 14))
        ->  Bitmap Index Scan on "PK_CompositeKeyJoins"  (cost=0.00..4.29 rows=1 width=0)
              Index Cond: (("IdPart1" = 23) AND ("IdPart2" = 9))
        ->  Bitmap Index Scan on "PK_CompositeKeyJoins"  (cost=0.00..4.29 rows=1 width=0)
              Index Cond: (("IdPart1" = 94) AND ("IdPart2" = 73))


         SELECT c.id_part1, c.id_part2, c.some_random_value, c.value
      FROM composite_key_joins AS c
      WHERE (c.id_part1 = 1 AND c.id_part2 = 1) OR (c.id_part1 = 1 AND c.id_part2 = 2) OR (c.id_part1 = 1 AND c.id_part2 = 3) OR (c.id_part1 = 1 AND c.id_part2 = 4) OR (c.id_part1 = 1 AND c.id_part2 = 5) OR (c.id_part1 = 1 AND c.id_part2 = 6) OR (c.id_part1 = 1 AND c.id_part2 = 7) OR (c.id_part1 = 1 AND c.id_part2 = 8) OR (c.id_part1 = 1 AND c.id_part2 = 9) OR (c.id_part1 = 1 AND c.id_part2 = 10) OR (c.id_part1 = 1 AND c.id_part2 = 11) OR (c.id_part1 = 1 AND c.id_part2 = 12) OR (c.id_part1 = 1 AND c.id_part2 = 13) OR (c.id_part1 = 1 AND c.id_part2 = 14) OR (c.id_part1 = 1 AND c.id_part2 = 15) OR (c.id_part1 = 1 AND c.id_part2 = 16) OR (c.id_part1 = 1 AND c.id_part2 = 17) OR (c.id_part1 = 1 AND c.id_part2 = 18) OR (c.id_part1 = 1 AND c.id_part2 = 19) OR (c.id_part1 = 1 AND c.id_part2 = 20) OR (c.id_part1 = 1 AND c.id_part2 = 21) OR (c.id_part1 = 1 AND c.id_part2 = 22) OR (c.id_part1 = 1 AND c.id_part2 = 23) OR (c.id_part1 = 1 AND c.id_part2 = 24) OR (c.id_part1 = 1 AND c.id_part2 = 25) OR (c.id_part1 = 1 AND c.id_part2 = 26) OR (c.id_part1 = 1 AND c.id_part2 = 27) OR (c.id_part1 = 1 AND c.id_part2 = 28) OR (c.id_part1 = 1 AND c.id_part2 = 29) OR (c.id_part1 = 1 AND c.id_part2 = 30) OR (c.id_part1 = 1 AND c.id_part2 = 31) OR (c.id_part1 = 1 AND c.id_part2 = 32) OR (c.id_part1 = 1 AND c.id_part2 = 33) OR (c.id_part1 = 1 AND c.id_part2 = 34) OR (c.id_part1 = 1 AND c.id_part2 = 35) OR (c.id_part1 = 1 AND c.id_part2 = 36) OR (c.id_part1 = 1 AND c.id_part2 = 37) OR (c.id_part1 = 1 AND c.id_part2 = 38) OR (c.id_part1 = 1 AND c.id_part2 = 39) OR (c.id_part1 = 1 AND c.id_part2 = 40) OR (c.id_part1 = 1 AND c.id_part2 = 41) OR (c.id_part1 = 1 AND c.id_part2 = 42) OR (c.id_part1 = 1 AND c.id_part2 = 43) OR (c.id_part1 = 1 AND c.id_part2 = 44) OR (c.id_part1 = 1 AND c.id_part2 = 45) OR (c.id_part1 = 1 AND c.id_part2 = 46) OR (c.id_part1 = 1 AND c.id_part2 = 47) OR (c.id_part1 = 1 AND c.id_part2 = 48) OR (c.id_part1 = 1 AND c.id_part2 = 49) OR (c.id_part1 = 1 AND c.id_part2 = 50) OR (c.id_part1 = 1 AND c.id_part2 = 51) OR (c.id_part1 = 1 AND c.id_part2 = 52) OR (c.id_part1 = 1 AND c.id_part2 = 53) OR (c.id_part1 = 1 AND c.id_part2 = 54) OR (c.id_part1 = 1 AND c.id_part2 = 55) OR (c.id_part1 = 1 AND c.id_part2 = 56) OR (c.id_part1 = 1 AND c.id_part2 = 57) OR (c.id_part1 = 1 AND c.id_part2 = 58) OR (c.id_part1 = 1 AND c.id_part2 = 59) OR (c.id_part1 = 1 AND c.id_part2 = 60) OR (c.id_part1 = 1 AND c.id_part2 = 61) OR (c.id_part1 = 1 AND c.id_part2 = 62) OR (c.id_part1 = 1 AND c.id_part2 = 63) OR (c.id_part1 = 1 AND c.id_part2 = 64) OR (c.id_part1 = 1 AND c.id_part2 = 65) OR (c.id_part1 = 1 AND c.id_part2 = 66) OR (c.id_part1 = 1 AND c.id_part2 = 67) OR (c.id_part1 = 1 AND c.id_part2 = 68) OR (c.id_part1 = 1 AND c.id_part2 = 69) OR (c.id_part1 = 1 AND c.id_part2 = 70)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 71) OR (c.id_part1 = 1 AND c.id_part2 = 72)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 73) OR (c.id_part1 = 1 AND c.id_part2 = 74)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 75) OR (c.id_part1 = 1 AND c.id_part2 = 76)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 77) OR (c.id_part1 = 1 AND c.id_part2 = 78)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 79) OR (c.id_part1 = 1 AND c.id_part2 = 80)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 81) OR (c.id_part1 = 1 AND c.id_part2 = 82)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 83) OR (c.id_part1 = 1 AND c.id_part2 = 84)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 85) OR (c.id_part1 = 1 AND c.id_part2 = 86)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 87) OR (c.id_part1 = 1 AND c.id_part2 = 88)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 89) OR (c.id_part1 = 1 AND c.id_part2 = 90)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 91) OR (c.id_part1 = 1 AND c.id_part2 = 92)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 93) OR (c.id_part1 = 1 AND c.id_part2 = 94)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 95) OR (c.id_part1 = 1 AND c.id_part2 = 96)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 97) OR (c.id_part1 = 1 AND c.id_part2 = 98)
                                                                                OR (c.id_part1 = 1 AND c.id_part2 = 99) OR (c.id_part1 = 2 AND c.id_part2 = 1)


        Bitmap Heap Scan on composite_key_joins c  (cost=431.97..559.79 rows=99 width=32) (actual time=0.065..0.076 rows=100 loops=1)
  Recheck Cond: (((id_part1 = 1) AND (id_part2 = 1)) OR ((id_part1 = 1) AND (id_part2 = 2)) OR ((id_part1 = 1) AND (id_part2 = 3)) OR ((id_part1 = 1) AND (id_part2 = 4)) OR ((id_part1 = 1) AND (id_part2 = 5)) OR ((id_part1 = 1) AND (id_part2 = 6)) OR ((id_part1 = 1) AND (id_part2 = 7)) OR ((id_part1 = 1) AND (id_part2 = 8)) OR ((id_part1 = 1) AND (id_part2 = 9)) OR ((id_part1 = 1) AND (id_part2 = 10)) OR ((id_part1 = 1) AND (id_part2 = 11)) OR ((id_part1 = 1) AND (id_part2 = 12)) OR ((id_part1 = 1) AND (id_part2 = 13)) OR ((id_part1 = 1) AND (id_part2 = 14)) OR ((id_part1 = 1) AND (id_part2 = 15)) OR ((id_part1 = 1) AND (id_part2 = 16)) OR ((id_part1 = 1) AND (id_part2 = 17)) OR ((id_part1 = 1) AND (id_part2 = 18)) OR ((id_part1 = 1) AND (id_part2 = 19)) OR ((id_part1 = 1) AND (id_part2 = 20)) OR ((id_part1 = 1) AND (id_part2 = 21)) OR ((id_part1 = 1) AND (id_part2 = 22)) OR ((id_part1 = 1) AND (id_part2 = 23)) OR ((id_part1 = 1) AND (id_part2 = 24)) OR ((id_part1 = 1) AND (id_part2 = 25)) OR ((id_part1 = 1) AND (id_part2 = 26)) OR ((id_part1 = 1) AND (id_part2 = 27)) OR ((id_part1 = 1) AND (id_part2 = 28)) OR ((id_part1 = 1) AND (id_part2 = 29)) OR ((id_part1 = 1) AND (id_part2 = 30)) OR ((id_part1 = 1) AND (id_part2 = 31)) OR ((id_part1 = 1) AND (id_part2 = 32)) OR ((id_part1 = 1) AND (id_part2 = 33)) OR ((id_part1 = 1) AND (id_part2 = 34)) OR ((id_part1 = 1) AND (id_part2 = 35)) OR ((id_part1 = 1) AND (id_part2 = 36)) OR ((id_part1 = 1) AND (id_part2 = 37)) OR ((id_part1 = 1) AND (id_part2 = 38)) OR ((id_part1 = 1) AND (id_part2 = 39)) OR ((id_part1 = 1) AND (id_part2 = 40)) OR ((id_part1 = 1) AND (id_part2 = 41)) OR ((id_part1 = 1) AND (id_part2 = 42)) OR ((id_part1 = 1) AND (id_part2 = 43)) OR ((id_part1 = 1) AND (id_part2 = 44)) OR ((id_part1 = 1) AND (id_part2 = 45)) OR ((id_part1 = 1) AND (id_part2 = 46)) OR ((id_part1 = 1) AND (id_part2 = 47)) OR ((id_part1 = 1) AND (id_part2 = 48)) OR ((id_part1 = 1) AND (id_part2 = 49)) OR ((id_part1 = 1) AND (id_part2 = 50)) OR ((id_part1 = 1) AND (id_part2 = 51)) OR ((id_part1 = 1) AND (id_part2 = 52)) OR ((id_part1 = 1) AND (id_part2 = 53)) OR ((id_part1 = 1) AND (id_part2 = 54)) OR ((id_part1 = 1) AND (id_part2 = 55)) OR ((id_part1 = 1) AND (id_part2 = 56)) OR ((id_part1 = 1) AND (id_part2 = 57)) OR ((id_part1 = 1) AND (id_part2 = 58)) OR ((id_part1 = 1) AND (id_part2 = 59)) OR ((id_part1 = 1) AND (id_part2 = 60)) OR ((id_part1 = 1) AND (id_part2 = 61)) OR ((id_part1 = 1) AND (id_part2 = 62)) OR ((id_part1 = 1) AND (id_part2 = 63)) OR ((id_part1 = 1) AND (id_part2 = 64)) OR ((id_part1 = 1) AND (id_part2 = 65)) OR ((id_part1 = 1) AND (id_part2 = 66)) OR ((id_part1 = 1) AND (id_part2 = 67)) OR ((id_part1 = 1) AND (id_part2 = 68)) OR ((id_part1 = 1) AND (id_part2 = 69)) OR ((id_part1 = 1) AND (id_part2 = 70)) OR ((id_part1 = 1) AND (id_part2 = 71)) OR ((id_part1 = 1) AND (id_part2 = 72)) OR ((id_part1 = 1) AND (id_part2 = 73)) OR ((id_part1 = 1) AND (id_part2 = 74)) OR ((id_part1 = 1) AND (id_part2 = 75)) OR ((id_part1 = 1) AND (id_part2 = 76)) OR ((id_part1 = 1) AND (id_part2 = 77)) OR ((id_part1 = 1) AND (id_part2 = 78)) OR ((id_part1 = 1) AND (id_part2 = 79)) OR ((id_part1 = 1) AND (id_part2 = 80)) OR ((id_part1 = 1) AND (id_part2 = 81)) OR ((id_part1 = 1) AND (id_part2 = 82)) OR ((id_part1 = 1) AND (id_part2 = 83)) OR ((id_part1 = 1) AND (id_part2 = 84)) OR ((id_part1 = 1) AND (id_part2 = 85)) OR ((id_part1 = 1) AND (id_part2 = 86)) OR ((id_part1 = 1) AND (id_part2 = 87)) OR ((id_part1 = 1) AND (id_part2 = 88)) OR ((id_part1 = 1) AND (id_part2 = 89)) OR ((id_part1 = 1) AND (id_part2 = 90)) OR ((id_part1 = 1) AND (id_part2 = 91)) OR ((id_part1 = 1) AND (id_part2 = 92)) OR ((id_part1 = 1) AND (id_part2 = 93)) OR ((id_part1 = 1) AND (id_part2 = 94)) OR ((id_part1 = 1) AND (id_part2 = 95)) OR ((id_part1 = 1) AND (id_part2 = 96)) OR ((id_part1 = 1) AND (id_part2 = 97)) OR ((id_part1 = 1) AND (id_part2 = 98)) OR ((id_part1 = 1) AND (id_part2 = 99)) OR ((id_part1 = 2) AND (id_part2 = 1)))
  Heap Blocks: exact=1
  ->  BitmapOr  (cost=431.97..431.97 rows=100 width=0) (actual time=0.058..0.063 rows=0 loops=1)
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.007..0.008 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 1))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 2))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 3))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 4))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 5))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 6))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 7))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 8))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 9))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 10))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 11))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 12))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 13))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 14))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 15))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 16))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 17))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 18))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 19))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 20))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 21))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 22))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 23))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 24))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 25))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 26))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 27))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 28))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 29))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 30))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 31))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 32))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 33))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 34))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 35))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 36))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 37))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 38))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 39))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 40))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 41))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 42))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 43))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 44))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 45))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 46))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 47))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 48))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 49))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 50))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 51))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 52))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 53))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 54))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 55))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 56))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 57))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 58))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 59))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 60))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 61))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 62))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 63))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 64))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 65))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 66))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 67))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 68))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 69))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 70))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 71))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 72))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 73))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 74))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 75))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 76))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 77))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 78))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 79))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 80))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 81))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 82))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 83))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 84))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 85))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 86))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 87))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 88))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 89))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 90))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 91))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 92))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 93))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 94))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 95))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 96))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 97))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 98))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.000..0.000 rows=1 loops=1)
              Index Cond: ((id_part1 = 1) AND (id_part2 = 99))
        ->  Bitmap Index Scan on pk_composite_key_joins  (cost=0.00..4.29 rows=1 width=0) (actual time=0.001..0.001 rows=1 loops=1)
              Index Cond: ((id_part1 = 2) AND (id_part2 = 1))
Planning Time: 0.500 ms
Execution Time: 0.743 ms
        */
        /// </summary>
        /// <remarks>Много боксинга, но зато поиск по ключам (не Scan Index, а Bitmap Index Scan)</remarks>
        public static IQueryable<T> CompositeKeyFilterP2<T, TId1, TId2>(this IQueryable<T> queriable, IEnumerable<(TId1, TId2)> ids, string propName0, string propName1)

        {
            var parameter = Expression.Parameter(typeof(T));

            var body = ids.Select(b => Expression.AndAlso(
                Expression.Equal(Expression.Property(parameter, propName0),
                                 Expression.Constant(b.Item1)),
                Expression.Equal(Expression.Property(parameter, propName1),
                             Expression.Constant(b.Item2))))
            .Aggregate(Expression.OrElse);

            var predicate = Expression.Lambda<Func<T, bool>>(body, parameter);
            return queriable.Where(predicate);
        }
        public static IQueryable<T> CompositeKeyFilterP3<T, TId1, TId2, TId3>(this IQueryable<T> queriable, IEnumerable<(TId1, TId2, TId3)> ids, string propName0, string propName1, string propName3)

        {
            var parameter = Expression.Parameter(typeof(T));

            var body = ids.Select(b => Expression.AndAlso(Expression.AndAlso(
                Expression.Equal(Expression.Property(parameter, propName0),
                                 Expression.Constant(b.Item1)),
                Expression.Equal(Expression.Property(parameter, propName1),
                                Expression.Constant(b.Item2))
                ),
                 Expression.Equal(Expression.Property(parameter, propName3),
                                Expression.Constant(b.Item3))
                ))
            .Aggregate(Expression.OrElse);

            var predicate = Expression.Lambda<Func<T, bool>>(body, parameter);
            return queriable.Where(predicate);
        }

    }
}
